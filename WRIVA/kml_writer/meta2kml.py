import json, os
import kml_writer, view_edit
import argparse
from dir_crawler import dir_crawler as dc
import pdb

parser = argparse.ArgumentParser(
    prog="CSV to KML",
    description="Turns CSV coordinates into a KML file"
)

parser.add_argument('-i',
                    '--input',
                    help="Path to metadata",
                    metavar="",
                    action="store")

parser.add_argument("-n",
                    "--names",
                    help="Add names to points",
                    action="store_true")

parser.add_argument('-o',
                    '--outfile',
                    help="Write output kml to this path",
                    metavar="",
                    action="store")

parser.add_argument("-k",
                    "--keep_csv",
                    help="Keep CSV file generated by process",
                    action="store_true")

args = parser.parse_args()

## Generate CSV for input ##
meta_path=args.input
session = dc(meta_path,
             ".json",
             None)

targets = session.traverse()
del session

raw_data = []
temp_filename = "temp.csv"
os.system("touch {}".format(temp_filename))
for meta_file in targets:
    with open(meta_file, 'r') as f:
        temp_data = json.load(f)
        if args.names:
            try:
                raw_data.append([temp_data["timestamp"], 
                                temp_data["extrinsics"]["lon"],
                                temp_data["extrinsics"]["lat"],
                                temp_data["fname"]])
            except:
                continue
        else:
            try:
                raw_data.append([temp_data["timestamp"], 
                                    temp_data["extrinsics"]["lon"],
                                    temp_data["extrinsics"]["lat"],
                                    None])
            except:
                continue

with open(temp_filename, 'w') as f:
    f.write("Measurement_DateTime,GPS_lat,GPS_lon,fname\n")
    for item in raw_data:
        f.write("{},{},{},{}\n".format(item[0], item[1], item[2], item[3]))

if args.outfile == None:
    outfile = os.path.basename(args.input)[:-4] + ".kml"

else:
    text,ext = os.path.splitext(args.outfile)
    if ext == ".kml":
        outfile = args.outfile
    else:
        outfile = text + ".kml"
    

if args.input:
    session = kml_writer.kml_writer(outfile)
    session.make_points(temp_filename)